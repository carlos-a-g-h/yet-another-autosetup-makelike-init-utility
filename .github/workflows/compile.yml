name: Compile using Nuitka

on:
  workflow_dispatch:
    inputs:
      TRY_ONLY:
        description: Get compilation details only
        type: boolean
        required: true
        default: false

env:
  MAIN_PY: "main.py"
  REQFILE: "requirements.txt"
  BIN_NAME: "yetup"

jobs:
  job-build:
    name: Build and upload executable binary
    runs-on: ubuntu-20.04
    steps:

      - name: Download repo
        uses: actions/checkout@v4
        with:
          path: workspace

      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9.6"

      - name: Setup Python (project dependencies)
        working-directory: workspace
        run: |
          pip install -r "${{ env.REQFILE }}"

      - name: Setup Python (install Nuitka)
        working-directory: workspace
        run: |
          pip install nuitka

      - name: Build
        working-directory: workspace
        run: |
          python3 -m nuitka --standalone --onefile --follow-imports --assume-yes-for-downloads "${{ env.MAIN_PY }}" --output-dir="the-output" --output-filename="${{ env.BIN_NAME }}"

      - name: (dbg) Check file
        if: ${{ inputs.TRY_ONLY == true }}
        working-directory: workspace
        run: |
          ls the-output
          ls the-output/${{ env.BIN_NAME }}
          file the-output/${{ env.BIN_NAME }}
          du -h the-output/${{ env.BIN_NAME }}

      - name: Get exact date
        if: ${{ inputs.TRY_ONLY == false }}
        id: step_date
        run: |
          echo "VAR_DATE=$(date +%Y-%m-%d-%H-%M-%S)" >> $GITHUB_OUTPUT

      - name: (dbg) Printing date
        if: ${{ inputs.TRY_ONLY == false }}
        run: echo "${{ steps.step_date.outputs.VAR_DATE }}"

      - name: Pack it up
        if: ${{ inputs.TRY_ONLY == false }}
        working-directory: workspace
        run: |
          mkdir -v "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}"
          mv -v "the-output/${{ env.BIN_NAME }}" "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}/"
          mv -v README.md "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}/"
          mv -v LICENSE "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}/"

          mkdir -v "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}/examples"
          mv -v example* "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}/examples/"

          echo "Content {"
          find "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}"
          echo "}"
          zip -0 -r "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}.zip" "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}"

      - name: Create release
        if: ${{ inputs.TRY_ONLY == false }}
        id: step_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: "${{ steps.step_date.outputs.VAR_DATE }}"
          release_name: "${{ steps.step_date.outputs.VAR_DATE }}"
          draft: false
          prerelease: false

      - name: Attach the artifact
        if: ${{ inputs.TRY_ONLY == false }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

        with:
          upload_url: "${{ steps.step_release.outputs.upload_url }}"
          asset_path: "workspace/${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}.zip"
          asset_name: "${{ env.BIN_NAME }}-${{ steps.step_date.outputs.VAR_DATE }}.zip"
          asset_content_type: application/octet-stream
